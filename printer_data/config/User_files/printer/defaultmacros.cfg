#region configuration variables
[gcode_macro ECHO_RATOS_VARS]
description: Echo RatOS variables to the console.
gcode:
    {% for var, value in printer["gcode_macro RatOS"].items() %}
        {action_respond_info(var ~ ": " ~ value)}
    {% endfor %}

#endregion configuration variables
    
#region Pause
[gcode_macro PAUSE]
description: Pauses the printer
rename_existing: PAUSE_BASE
variable_extrude: 1.5
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    # Define park positions 
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
    {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
    # Calculate safe Z position
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 20.0) %}
        {% set z_safe = 20.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    PAUSE_BASE
    G91
    # Retract
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{E} F2100
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    # Move to park position
    {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe} F{z_speed}
        _PARK LOCATION={printer["gcode_macro RatOS"].pause_print_park_in} X={printer["gcode_macro RatOS"].pause_print_park_x}
    {% else %}
        {action_respond_info("Printer not homed")}
    {% endif %}
    FILDET_DISABLE

    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
        M117 Print paused
        RESPOND COLOR=warning MSG="Print paused"
        PAUSE_AUDIO
    {% endif %}
#endregion Pause

#region Resume
[gcode_macro RESUME]
description: Resumes the print if the printer is paused.
rename_existing: RESUME_BASE
gcode:
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    # Prime
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G91
        G1 E{E} F2100
        G90
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED={printer["gcode_macro RatOS"].macro_travel_speed|float}
    FILDET_ENABLE
    RESUME_BASE

    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
        M117 Resuming print
        RESPOND COLOR=info MSG="Resuming print"
        RESUME_AUDIO
    {% endif %}
#endregion Resume

#region Cancel print
[gcode_macro CANCEL_PRINT]
description: Cancels the printer
rename_existing: CANCEL_PRINT_BASE
gcode:
    SAVE_GCODE_STATE NAME=end_print_state
    _USER_END_PRINT_BEFORE_HEATERS_OFF
    _END_PRINT_BEFORE_HEATERS_OFF
    TURN_OFF_HEATERS
    _USER_END_PRINT_AFTER_HEATERS_OFF
    _END_PRINT_AFTER_HEATERS_OFF
    _USER_END_PRINT_PARK
    _END_PRINT_PARK
    # Clear skew profile if any was loaded.
    {% if printer["gcode_macro RatOS"].skew_profile is defined %}
        SET_SKEW CLEAR=1
    {% endif %}
    # Steppers off
    M84
    # Part cooling fan off
    M107
    # Clear bed mesh so that G28 doesn't fail.
    BED_MESH_CLEAR

    {% if printer["gcode_macro RatOS"].remove_mesh_after_print|lower == 'true' %}
        {% set default_profile = printer["gcode_macro RatOS"].bed_mesh_profile|default('ratos') %}
        BED_MESH_PROFILE REMOVE={default_profile}
        M117 Removing mesh
        RESPOND MSG="Removing mesh: {default_profile}"
    {% endif %}
    
    M117 Print done :)
    RESPOND MSG="Print done :)"
    RESTORE_GCODE_STATE NAME=end_print_state
    FILDET_DISABLE
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    CANCEL_PRINT_BASE

    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
        M117 Print cancelled
        RESPOND COLOR=warning MSG="Print cancelled"
        CANCEL_PRINT_AUDIO
    {% endif %}
#endregion Cancel print

#region Frontpurge
[gcode_macro FRONTPURGE]
description: Prints a primeline at the front, used internally, if configured, as part of the START_PRINT macro.
gcode:
    # Get relevant printer params
    {% set travel_speed = printer["gcode_macro RatOS"].purge_travel_speed|float * 60 %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Get purge settings from variable or macro defaults
    {% set verbose_enable = printer["gcode_macro RatOS"].purge_verbose_enable | abs %}
    {% set purge_height = printer["gcode_macro RatOS"].purge_height | float %}
    {% set tip_distance = printer["gcode_macro RatOS"].tip_distance | float %}
    {% set purge_amount = printer["gcode_macro RatOS"].purge_amount | float %}
    {% set flow_rate = printer["gcode_macro RatOS"].flow_rate | float %}

    # Calculate purge origins from specified variables
    {% set purge_x_start = printer["gcode_macro RatOS"].purge_x_start | float %}
    {% set purge_x_end = printer["gcode_macro RatOS"].purge_x_end | float %}
    {% set purge_y_start = printer["gcode_macro RatOS"].purge_y_start | float %}
    {% set purge_y_end = printer["gcode_macro RatOS"].purge_y_end | float %}

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}
        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
    {% else %}
        {% if verbose_enable %}
            {action_respond_info("Purging from ({}, {}) to ({}, {}) with {}mm of filament. Flow rate: {}mm3/s.".format(
                purge_x_start, purge_y_start, purge_x_end, purge_y_end, purge_amount, flow_rate))}
        {% endif %}

        SAVE_GCODE_STATE NAME=Prepurge_State  # Save gcode state

        G92 E0                              # Reset extruder
        G0 F{travel_speed}                  # Set travel speed
        G90                                 # Absolute positioning
        G0 X{purge_x_start} Y{purge_y_start} Z{purge_height}  # Move to start position
        M83                                 # Relative extrusion mode
        G1 E{tip_distance} F{purge_move_speed}  # Move filament tip
        G1 X{purge_x_end} E{purge_amount} F{purge_move_speed}  # Purge line
        {RETRACT}                           # Retract
        # G0 X{purge_x_end + 10} F{travel_speed}  # Rapid move to break string
        G92 E0                              # Reset extruder distance
        M82                                 # Absolute extrusion mode
        G0 Z{purge_height * 2} F{travel_speed}  # Z hop

        RESTORE_GCODE_STATE NAME=Prepurge_State  # Restore gcode state

    {% endif %}
#endregion Frontpurge

#region Primeline
[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
    SAVE_GCODE_STATE NAME=prime_line_state
    {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
    {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
        {% set x_start = 5 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
        {% set x_start = printer.toolhead.axis_maximum.x - 5 %}
    {% else %}
        {% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
        {% set y_start = 5 %}
        {% set y_factor = 1 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
        {% set y_start = printer.toolhead.axis_maximum.y - 5 %}
        {% set y_factor = -1 %}
    {% else %}
        {% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
        {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|float < printer.toolhead.axis_maximum.y / 2 %}
            {% set y_factor = 1 %}
        {% else %}
            {% set y_factor = -1 %}
        {% endif %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'forwards' %}
        {% set y_factor = 1 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'backwards' %}
        {% set y_factor = -1 %}
    {% endif %}
    {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
    # Absolute positioning
    G90 
    # Absolute extrusion
    M82
    M117 Priming nozzle with prime line..
    RESPOND MSG="Priming nozzle with prime line.."
    # Lift to start print Z height
    G0 Z{z} F{z_speed}
    # move to blob position along the edge of the bed
    G1 X{x_start} F{speed}
    G1 Y{y_start} F{speed}
    # Get ready to prime
    G1 Z0.3 F{z_speed}
    # Reset extrusion distance
    G92 E0
    # Prime nozzle 
    G1 Y{y_start + (70 * y_factor)} E16 F1200
    # Wipe
    G1 Y{y_start + (90 * y_factor)} F{speed}
    RESTORE_GCODE_STATE NAME=prime_line_state
#endregion Primeline

#region Primeblob
[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
    SAVE_GCODE_STATE NAME=prime_blob_state
    M117 Priming nozzle with prime blob..
    RESPOND MSG="Priming nozzle with prime blob.."
    {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
    {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
    {% set fan_speed = printer["gcode_macro RatOS"].nozzle_prime_bridge_fan|float %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
        {% set x_start = 5 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
        {% set x_start = printer.toolhead.axis_maximum.x - 5 %}
    {% else %}
        {% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
        {% set y_start = 5 %}
        {% set y_factor = 1 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
        {% set y_start = printer.toolhead.axis_maximum.y - 5 %}
        {% set y_factor = -1 %}
    {% else %}
        {% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
        {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|float < printer.toolhead.axis_maximum.y / 2 %}
            {% set y_factor = 1 %}
        {% else %}
            {% set y_factor = -1 %}
        {% endif %}
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'forwards' %}
        {% set y_factor = 1 %}
    {% elif printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'backwards' %}
        {% set y_factor = -1 %}
    {% endif %}
    {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
    # Absolute positioning
    G90 
    # Relative extrusion
    M83
    # Lift to start print Z height
    G0 Z{z} F{z_speed}
    # move close to blob position along the edge of the bed
    G1 X{x_start} F{speed}
    G1 Y{y_start + (15 * y_factor)} F{speed}
    # Lower to blob extrusion height
    G1 Z0.5 F{z_speed}
    # Move to final position horizontally
    G1 Y{y_start} F{speed}
    # Extrude a blob
    G1 F60 E20
    # 40% fan
    M106 S{fan_speed} 
    # Move the extruder up by 5mm while extruding, breaks away from blob
    G1 Z5 F100 E5  
    # Move to wipe position, but keep extruding so the wipe is attached to blob
    G1 F200 Y{y_start + (25 * y_factor)} E1 
    # Go down diagonally while extruding
    # Broken down in z moves under 2mm as a workaround for a tuning tower test.
    # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
    G1 F200 Y{y_start + (30 * y_factor)} Z3.8 E0.5
    G1 F200 Y{y_start + (35 * y_factor)} Z2.6 E0.5
    G1 F200 Y{y_start + (40 * y_factor)} Z1.4 E0.5
    G1 F200 Y{y_start + (45 * y_factor)} Z0.2 E0.5
    # 0% fan
    M106 S0
    # small wipe line
    G1 F200 Y{y_start + (50 * y_factor)} Z0.2 E0.6 
    # Break away wipe
    G1 F{speed} Y{y_start + (100 * y_factor)}
    RESTORE_GCODE_STATE NAME=prime_blob_state
#endregion Primeblob

#region park
[gcode_macro _PARK]
gcode:
    {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
    # Get X position
    {% if params.X != '' %}
        {% if params.X|float >= printer.toolhead.axis_minimum.x + 5 and params.X|float <= printer.toolhead.axis_maximum.x - 5 %}
            {% set safe_x = params.X|float %}
        {% else %}
            {action_respond_info('The requested X co-ordinate is outside the defined axis bounds - using defaults')}
            {% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
        {% endif %}
    {% else %}
        {% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
    {% endif %}
    # Get Y position
    {% if params.LOCATION|default('back')|lower == 'back' %}
        {% set y = printer.toolhead.axis_maximum.y - 5 %}
    {% elif params.LOCATION|lower == 'front' %}
        {% set y = printer.toolhead.axis_minimum.y + 5 %}
    {% elif params.LOCATION|lower == 'center' %}
        {% set y = printer.toolhead.axis_maximum.y / 2 %}
    {% endif %}
    # Absolute positioning
    G90 
    # Verbose
    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
        M117 Parking toolhead
        RESPOND COLOR=info MSG="Parking toolhead at X:{safe_x}, Y:{y}"
    {% endif %}
    # Park
    G0 X{safe_x} Y{y} F{speed} 
#endregion park

#region Color change
[gcode_macro M600]
description: Executes a color change by pausing the printer an unloading the filament.
gcode:
    PAUSE
    ALARM_AUDIO
#endregion Color change

#region Unload filament
[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    G91
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...
        # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
        M104 S{params.TEMP|default(220, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}
    {% set unload_speed = printer["gcode_macro RatOS"].filament_unload_speed|float * 60 %}
    {% set unload_length = printer["gcode_macro RatOS"].filament_unload_length|float %}
    M117 Unloading filament...
    # Extrude a bit
    G0 E10 F300
    # Extract filament to cold end area 
    G0 E-5 F3600
    # Wait for three seconds
    G4 P3000
    # Push back the filament to smash any stringing 
    G0 E5 F3600
    # Extract back fast in to the cold zone 
    G0 E-15 F3600
    # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
    G0 E-{unload_length} F{unload_speed}
    M117 Filament unloaded!
    RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
    RESTORE_GCODE_STATE NAME=unload_state
#endregion Unload filament

#region Load filament
[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
    SAVE_GCODE_STATE NAME=load_state
    G91
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...
        M104 S{params.TEMP|default(220, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}
    {% set load_speed = printer["gcode_macro RatOS"].filament_load_speed|float * 60 %}
    {% set load_length = printer["gcode_macro RatOS"].filament_load_length|float %}
    M117 Loading filament...
    # Load the filament into the hotend area.
    G0 E{load_length} F{load_speed}
    # Wait a second
    G4 P1000
    # Purge
    G0 E40 F100
    # Wait for purge to complete
    M400
    M117 Filament loaded!
    RESPOND MSG="Filament loaded!"
    RESTORE_GCODE_STATE NAME=load_state
#endregion Load filament

#region Set kinematic position
[gcode_macro SET_CENTER_KINEMATIC_POSITION]
description: FOR DEBUGGING PURPOSES ONLY. Sets the internal printer kinematic state to the center of all axes regardless of actual physical position.
gcode:
    RESPOND MSG="WARNING: ONLY USE SET_CENTER_KINEMATIC_POSITION FOR DEBUGGING PURPOSES. YOU'RE OVERRIDING THE INTERNAL POSITIONING STATE OF THE PRINTER. PROCEED WITH CAUTION AND DO A PROPER G28 WHEN DONE."
    SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=True
    SET_KINEMATIC_POSITION X={printer.toolhead.axis_maximum.x / 2} Y={printer.toolhead.axis_maximum.y / 2} Z={printer.toolhead.axis_maximum.z / 2}
#endregion Set kinematic position

#region Start print
[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    CLEAR_PAUSE
    FILDET_ENABLE
    SAVE_GCODE_STATE NAME=start_print_state
    # Metric values
    G21
    # Absolute positioning
    {% if printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
        G90
    {% endif %}
    # Set extruder to absolute mode
    M82
    _USER_START_PRINT_BEFORE_HOMING
    # Home if needed
    MAYBE_HOME
    G0 Z2
    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
        M117 Heating bed...
        RESPOND MSG="Heating bed..."
    {% endif %}
    # Wait for bed to heat up
    M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }
    {% set beacon_soak_time = printer["gcode_macro RatOS"].beacon_soak_time|default(60000) %}
    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
        M117 Waiting for bed temp to settle
        RESPOND COLOR=info MSG="Waiting ms{beacon_soak_time} for bed temp to settle"
    {% endif %}
    G4 P{beacon_soak_time} # Optional, let temps settle for 1 min

    {% if printer["gcode_macro RatOS"].clean_nozzle_with_brush|lower == 'true' %} # variable_clean_nozzle_with_brush: True/False
	_CLEAN_NOZZLE_WITH_BRUSH
    {% endif %}

    _PREHEAT_HOTEND

    _START_Z_TILTI_AFTER_HEATING_BED # Do z tilt with selected beacon method

    _START_PRINT_BED_MESH # Do bed mesh with selected beacon method

    _CALIBRATE_Z_OFFSET_WITH_NOZZLE
    
    # Start heating extruder
    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
        M117 Heating up hotend
        RESPOND COLOR=info MSG="Heating up hotend"
        HEATUP_HOTEND_AUDIO
    {% endif %}
    M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
    
    # Run the users "PARK" macro
    _USER_START_PRINT_PARK
    # Run the customizable "PARK" macro
    _START_PRINT_PARK
    # Wait for extruder to heat up
    M117 Heating Extruder...
    RESPOND MSG="Heating Extruder..."
    M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
    # Run the user created "AFTER_HEATING_EXTRUDER" macro.
    _USER_START_PRINT_AFTER_HEATING_EXTRUDER
    # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
    _START_PRINT_AFTER_HEATING_EXTRUDER
    M117 Printing...
    RESPOND MSG="Printing..."
    RESTORE_GCODE_STATE NAME=start_print_state
    # Set extrusion mode based on user configuration
    {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
        M83
    {% else %}
        M82
    {% endif %}
    G92 E0
    
    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
        M117 Starting print
        RESPOND COLOR=info MSG="Starting print"
        {% if printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
            RESPOND COLOR=info MSG="Force absolute positioning is TRUE"
        {% endif %}
        {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
            RESPOND COLOR=info MSG="Print using relative extrusion"
        {% else %}
            RESPOND COLOR=info MSG="Print using absolute extrusion"
        {% endif %}
        START_AUDIO
    {% endif %}
#endregion Start print

#region User start print before homing
[gcode_macro _USER_START_PRINT_BEFORE_HOMING]
gcode:
    {% if printer["gcode_macro RatOS"].use_skew_profile|lower == 'true' %}
        GET_CURRENT_SKEW
        {% set profile = printer["gcode_macro RatOS"].skew_profile_name|string %}
        RESPOND COLOR=info MSG="Setting skew to {profile}"
        SKEW_PROFILE LOAD={profile}
        GET_CURRENT_SKEW
    {% endif %}
#endregion User start print before homing

#region Start print after heating bed
[gcode_macro _START_Z_TILTI_AFTER_HEATING_BED]
gcode:
    M117 Adjusting Z tilt...
    RESPOND MSG="Adjusting Z tilt..."

    {% if printer["gcode_macro RatOS"].beacon_contact_mesh|lower == 'true' %}
        {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
            M117 Starting z tilt with contact
            RESPOND COLOR=info MSG="Starting z tilt with contact"
        {% endif %}
        Z_TILT_ADJUST PROBE_METHOD=contact
    {% elif printer["gcode_macro RatOS"].beacon_contact_mesh|lower == 'false' %}
        {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
            M117 Starting z tilt with proximity
            RESPOND COLOR=info MSG="Starting z tilt with proximity"
        {% endif %}
        Z_TILT_ADJUST PROBE_METHOD=proximity
    {% endif %}

    M117 Rehoming Z after Z tilt adjustment...
    RESPOND MSG="Rehoming Z after Z tilt adjustment..."
    # Home again as Z will have changed after tilt adjustment and bed heating.
    G28 Z
#endregion Start print after heating bed

#region Preheat hotend
[gcode_macro _PREHEAT_HOTEND]
gcode:
    {% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
    
        {% set min_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
        {% set max_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float + 5 %}

        {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
            M117 Preheating hotend
            RESPOND COLOR=info MSG="Preheating hotend to {min_temp}c"
        {% endif %}
        
        M117 Pre-heating extruder...
        RESPOND MSG="Pre-heating extruder..."
        # Wait for extruder to reach a predefined preheat temp so an inductive probe (if present) is at a predictable temp. 
        # Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
        M104 S{min_temp}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
    {% endif %}
#endregion Preheat hotend

#region Start print bed mesh
[gcode_macro _START_PRINT_BED_MESH]
gcode:
    {% set default_profile = printer["gcode_macro RatOS"].bed_mesh_profile|default('ratos') %}
    {% set beacon_touch_mesh_runs = printer["gcode_macro RatOS"].beacon_touch_mesh_runs|default(1) %}
    {% set beacon_touch_mesh_probe_count = printer["gcode_macro RatOS"].beacon_touch_mesh_probe_count|default((10, 10)) %}

    {% if printer["gcode_macro RatOS"].calibrate_bed_mesh|lower == 'true' %}
        BED_MESH_CLEAR
        {% if printer["gcode_macro RatOS"].beacon_contact_mesh|lower == 'true' %}
            {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
                M117 Starting bed mesh with contact
                RESPOND COLOR=info MSG="Starting bed mesh with contact Runs: {beacon_touch_mesh_runs} Probe count: {beacon_touch_mesh_probe_count}"
                BED_MESH_AUDIO
            {% endif %}
            BED_MESH_CALIBRATE PROFILE={default_profile} PROBE_METHOD=contact RUNS={beacon_touch_mesh_runs} PROBE_COUNT={beacon_touch_mesh_probe_count}
        {% elif printer["gcode_macro RatOS"].beacon_contact_mesh|lower == 'false' %}
            {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
                M117 Starting bed mesh with proproximity
                RESPOND COLOR=info MSG="Starting bed mesh with proproximity"
                BED_MESH_AUDIO
            {% endif %}
            BED_MESH_CALIBRATE PROFILE={default_profile}
        {% endif %}
        BED_MESH_PROFILE LOAD={default_profile}
    {% elif printer["gcode_macro RatOS"].bed_mesh_profile is defined %}
        {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
            M117 Sklipping bed mesh and loading mesh
            RESPOND COLOR=info MSG="Sklipping bed mesh and loading mesh {printer["gcode_macro RatOS"].bed_mesh_profile}"
            BED_MESH_AUDIO
        {% endif %}
        BED_MESH_CLEAR
        BED_MESH_PROFILE LOAD={printer["gcode_macro RatOS"].bed_mesh_profile}
    {% endif %}
#endregion Start print bed mesh

#region First Z-offset calibration
[gcode_macro _CALIBRATE_Z_OFFSET_WITH_NOZZLE]
gcode:
    {% set beacon_touch_z_offset = printer["gcode_macro RatOS"].beacon_touch_z_offset %}

    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
         M117 Preheating hotend
         RESPOND COLOR=info MSG="Seting offset to: {beacon_touch_z_offset}"
    {% endif %}
  
    {% if printer["gcode_macro RatOS"].calibrate_z_offset_with_nozzle|lower == 'true' %}
        {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
            M117 Calibrating z-offset with nozzle
            RESPOND COLOR=info MSG="Calibrating z-offset with nozzle"
        {% endif %}
    
        G28 Z METHOD=CONTACT CALIBRATE=1
        RESPOND MSG="Setting thermal expansion z offset to: {beacon_touch_z_offset}"
        SET_GCODE_OFFSET Z_ADJUST={beacon_touch_z_offset} MOVE=1
    {% endif %}
#endregion Z-offset calibration

#region Start print park
[gcode_macro _START_PRINT_PARK]
gcode:
    {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
    {% set zSpeed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
    _PARK LOCATION={printer["gcode_macro RatOS"].start_print_park_in} X={printer["gcode_macro RatOS"].start_print_park_x}
    G0 Z{z} F{zSpeed}
#endregion Start print park

#region User start print park
[gcode_macro _USER_START_PRINT_PARK]
gcode:
#endregion User start print park

#region Start print after hearing extruder
[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
    {% set has_offset = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) != 9999.9 %}
    {% if has_offset %}
        ADD_PRIME_PROBE_TO_OFFSET
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'frontpurge' %}
        FRONTPURGE
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeline' %}
        PRIME_LINE
    {% endif %}
    {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeblob' %}
        PRIME_BLOB
    {% endif %}
    {% if has_offset %}
        SUBTRACT_PRIME_PROBE_FROM_OFFSET
    {% endif %}
#endregion Start print after hearing extruder

#region User start print after hearing extruder
[gcode_macro _USER_START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
#endregion User start print after hearing extruder

#region Start print heat chamber
[gcode_macro _START_PRINT_HEAT_CHAMBER]
description: Uses the extruder sensor to wait for chamber temp. Override the _START_PRINT_HEAT_CHAMBER macro to implement heated chamber handling.
gcode:
    {% if params.CHAMBER_TEMP is defined and params.BED_TEMP is defined and params.CHAMBER_TEMP|int > 0 %}
        {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
        {% set zSpeed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
        G0 Z{z} F{zSpeed}
        M84
        M117 Heating chamber...
        RESPOND MSG="Heating chamber..."
        M140 S{params.BED_TEMP}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.CHAMBER_TEMP}
        MAYBE_HOME
    {% endif %}
#endregion Start print heat chamber

#region User start print heat chamber
[gcode_macro _USER_START_PRINT_HEAT_CHAMBER]
description: Uses the extruder sensor to wait for chamber temp. Override the _START_PRINT_HEAT_CHAMBER macro to implement heated chamber handling.
gcode:
#endregion User start print heat chamber

#region End print
# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:
    SAVE_GCODE_STATE NAME=end_print_state
    _USER_END_PRINT_BEFORE_HEATERS_OFF
    _END_PRINT_BEFORE_HEATERS_OFF
    TURN_OFF_HEATERS
    _USER_END_PRINT_AFTER_HEATERS_OFF
    _END_PRINT_AFTER_HEATERS_OFF
    _USER_END_PRINT_PARK
    _END_PRINT_PARK
    # Clear skew profile if any was loaded.
    {% if printer["gcode_macro RatOS"].skew_profile is defined %}
        M117 Removing mesh
        RESPOND MSG="Removing mesh"
        SET_SKEW CLEAR=1
    {% endif %}
    # Steppers off
    M84
    # Part cooling fan off
    M107
    # Clear bed mesh so that G28 doesn't fail.
    BED_MESH_CLEAR

    {% if printer["gcode_macro RatOS"].remove_mesh_after_print|lower == 'true' %}
        {% set default_profile = printer["gcode_macro RatOS"].bed_mesh_profile|default('ratos') %}
        BED_MESH_PROFILE REMOVE={default_profile}

        {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
            M117 Removing mesh
            RESPOND MSG="Removing mesh: {default_profile}"
        {% endif %}
    {% endif %}
    
    M117 Done :)
    RESPOND MSG="Done :)"
    RESTORE_GCODE_STATE NAME=end_print_state
    FILDET_DISABLE

    {% if printer["gcode_macro RatOS"].terminal_verbose|lower == 'true' %}
        PRINT_DONE_AUDIO
        M117 Print done
        RESPOND COLOR=info MSG="Print done"
    {% endif %}

    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
#endregion End print

#region End print before heaters off
[gcode_macro _END_PRINT_BEFORE_HEATERS_OFF]
gcode:
    RESPOND MSG="Cleaning up..."
#endregion End print before heaters off

#region User end print before heaters off
[gcode_macro _USER_END_PRINT_BEFORE_HEATERS_OFF]
gcode:
#endregion User end print before heaters off

#region End print after heaters off
[gcode_macro _END_PRINT_AFTER_HEATERS_OFF]
gcode:
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set z_safe = act_z %}
    {% set end_print_park_z_type = printer["gcode_macro RatOS"].end_print_park_z_type|lower %}
    {% set end_print_park_z_hop = printer["gcode_macro RatOS"].end_print_park_z_hop|float %}
    {% set end_print_park_z_location = printer["gcode_macro RatOS"].end_print_park_z_location|float %}

    {% if act_z >= 200 %}
        RESPOND COLOR=info MSG="Current Z position is 200 or more, skipping park"
    {% else %}
        {% if end_print_park_z_type == 'zhop' %}
            RESPOND COLOR=info MSG="Using zhop to park bed"
            {% set z_hop = end_print_park_z_hop %}
            {% if act_z < (max_z - z_hop) %}
                {% set z_safe = act_z + z_hop %}
            {% else %}
                {% set z_safe = max_z %}
            {% endif %}
        {% else %}
            RESPOND COLOR=info MSG="Using location to park bed"
            {% set z_safe = end_print_park_z_location %}
        {% endif %}

        RESPOND COLOR=info MSG="Parking bed at: {z_safe }"
        # Retract the filament a bit before lifting the nozzle.
        G1 E-2 F3600
        # Move to safe Z position
        G0 Z{z_safe} F3600
        # Retract filament even more
        G1 E-2 F3600
    {% endif %}

    # Back to absolute positioning
    G90
#endregion End print after heaters off

#region User end print after heaters off
[gcode_macro _USER_END_PRINT_AFTER_HEATERS_OFF]
gcode:
#endregion User end print after heaters off

#region End print park
[gcode_macro _END_PRINT_PARK]
gcode:
    _PARK LOCATION={printer["gcode_macro RatOS"].end_print_park_in} X={printer["gcode_macro RatOS"].end_print_park_x}
#endregion End print park

#region User end print park
[gcode_macro _USER_END_PRINT_PARK]
gcode:
#endregion User end print park

#region Save probe results
[gcode_macro SAVE_PROBE_RESULT]
gcode:
    {% set last_z = printer.probe.last_z_result %}
    SET_GCODE_VARIABLE MACRO=RatOS VARIABLE={params.VARIABLE|default('last_z')} VALUE={last_z}
#endregion Save probe results

#region Probe for priming
[gcode_macro PROBE_FOR_PRIMING]
gcode:
    {% if printer["gcode_macro RatOS"].nozzle_priming|lower != 'false' %}
        SAVE_GCODE_STATE NAME=probe_for_priming_state
        RESPOND MSG="Probing the prime location.."
        {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
        {% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
        {% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
            {% set x_start = 5 %}
        {% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
            {% set x_start = printer.toolhead.axis_maximum.x - 5 %}
        {% else %}
            {% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
        {% endif %}
        {% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
            {% set y_start = 5 %}
        {% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
            {% set y_start = printer.toolhead.axis_maximum.y - 5 %}
        {% else %}
            {% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
        {% endif %}
        {% set z = printer.configfile.settings.bed_mesh.horizontal_move_z|float %}
        # get bed mesh config object
        {% set mesh_config = printer.configfile.config.bed_mesh %}

        # Get probe offsets
        {% if printer.configfile.settings.bltouch is defined %}
            {% set x_offset = printer.configfile.settings.bltouch.x_offset|float %}
            {% set y_offset = printer.configfile.settings.bltouch.y_offset|float %}
        {% elif printer.configfile.settings.probe is defined %}
            {% set x_offset = printer.configfile.settings.probe.x_offset|float %}
            {% set y_offset = printer.configfile.settings.probe.y_offset|float %}
        {% elif printer.configfile.settings.beacon is defined %}
            {% set x_offset = printer.configfile.settings.beacon.x_offset|float %}
            {% set y_offset = printer.configfile.settings.beacon.y_offset|float %}
        {% else %}
            { action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
        {% endif %}

        # get configured bed mesh area
        {% set min_x = mesh_config.mesh_min.split(",")[0]|float - x_offset %}
        {% set min_y = mesh_config.mesh_min.split(",")[1]|float - y_offset %}
        {% set max_x = mesh_config.mesh_max.split(",")[0]|float - x_offset %}
        {% set max_y = mesh_config.mesh_max.split(",")[1]|float - y_offset %}

        # make sure probe coordinates lie within the configured mesh area
        {% set x_start = [[x_start, max_x]|min, min_x]|max %}
        {% set y_start = [[y_start, max_y]|min, min_y]|max %}

        RESPOND MSG="PROBE_FOR_PRIMING: Probing the prime location at X: {x_start} Y: {y_start}"

        # Absolute positioning
        G90 
        # Relative extrusion
        M83
        # Lift to horizontal_move_z
        G0 Z{z} F{z_speed}
        # move close to blob position
        G1 X{x_start} Y{y_start} F{speed}
        PROBE_CURRENT_POSITION
        SAVE_PROBE_RESULT VARIABLE=probe_for_priming_result

        RESTORE_GCODE_STATE NAME=probe_for_priming_state
    {% endif %}
#endregion Probe for priming

#region Reset prime probe state
[gcode_macro RESET_PRIME_PROBE_STATE]
gcode:
    SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=probe_for_priming_result VALUE=None
#endregion Reset prime probe state

#region Probe current position
[gcode_macro PROBE_CURRENT_POSITION]
gcode:
    SAVE_GCODE_STATE NAME=probe_current_position_state
    PROBE
    RESTORE_GCODE_STATE NAME=probe_current_position_state MOVE=1 MOVE_SPEED={printer["gcode_macro RatOS"].macro_z_speed|float}
#endregion Probe current position

#region Add prime probe to offset
[gcode_macro ADD_PRIME_PROBE_TO_OFFSET]
gcode:
    {% set last_z = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) %}
    {% if printer.configfile.settings.bltouch is defined %}
        {% set z_offset = printer.configfile.settings.bltouch.z_offset|float %}
    {% elif printer.configfile.settings.probe is defined %}
        {% set z_offset = printer.configfile.settings.probe.z_offset|float %}
    {% else %}
        { action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
    {% endif %}
    {% if last_z == 9999.9 %}
        { action_raise_error("No probe result found for prime area. This is likely a bug.") }
    {% endif %}
    {% set adjustment = last_z - z_offset %}
    {% set adjustment_threshold = printer["gcode_macro RatOS"].adaptive_prime_offset_threshold|float %}
    {% if adjustment < adjustment_threshold %}
        { action_raise_error("Abnormal probe offset detected. Needed offset of {adjustment} is below the offset threshold of -1mm. Please verify the probe is over the bed when probing for priming. If it isn't, you should adjust you min/max bed_mesh settings so the probe is always over the print area.") }
    {% endif %}
    RESPOND MSG="ADD_PRIME_PROBE_TO_OFFSET: adjusting z offset by {adjustment}"
    SET_GCODE_OFFSET Z_ADJUST={adjustment} MOVE=1
#endregion Add prime probe to offset

#region Subtract prime probe from offset
[gcode_macro SUBTRACT_PRIME_PROBE_FROM_OFFSET]
gcode:
    {% set last_z = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) %}
    {% if printer.configfile.settings.bltouch is defined %}
        {% set z_offset = printer.configfile.settings.bltouch.z_offset|float %}
    {% elif printer.configfile.settings.probe is defined %}
        {% set z_offset = printer.configfile.settings.probe.z_offset|float %}
    {% else %}
        { action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
    {% endif %}
    {% if last_z == 9999.9 %}
        { action_raise_error("No probe result found for prime area. This is likely a bug.") }
    {% endif %}
    RESPOND MSG="SUBTRACT_PRIME_PROBE_FROM_OFFSET: adjusting z offset by {z_offset - last_z}"
    SET_GCODE_OFFSET Z_ADJUST={z_offset - last_z} MOVE=1
#endregion Subtract prime probe from offset
